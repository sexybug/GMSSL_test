
#include<openssl/bn.h>

static void print_u8(const char* title, const uint8_t* ptr, size_t len)
{
    printf("uint8_t %s[%d] = {\n", title, len);
    for (size_t i = 0; i < len; i++)
    {
        if (i % 16 == 0)
        {
            printf("    ");
        }
        printf("0x%02x, ", ptr[i]);
        if ((i + 1) % 16 == 0 || ((i + 1) == len && (i + 1) % 16 != 0))
        {
            printf("\n");
        }
    }
    printf("};\n\n");
}

void print_bn(const char* name, const BIGNUM* bn) {
    uint8_t buf[1024];
    BN_bn2bin(bn, buf);
    print_u8(name, buf, BN_num_bytes(bn));
}

int sm2_sign_sca(int bn_byte_len, const uint8_t* n, const uint8_t* k, const uint8_t* r, const uint8_t* s, uint8_t* d)
{
    BN_CTX* bn_ctx = BN_CTX_new();

    BIGNUM* n_bn = BN_bin2bn(n, bn_byte_len, NULL);
    BIGNUM* k_bn = BN_bin2bn(k, bn_byte_len, NULL);
    BIGNUM* r_bn = BN_bin2bn(r, bn_byte_len, NULL);
    BIGNUM* s_bn = BN_bin2bn(s, bn_byte_len, NULL);
    BIGNUM* t1_bn = BN_new();
    BIGNUM* t2_bn = BN_new();
    BIGNUM* d_bn = BN_new();

    //t1 = (r+s) mod n
    BN_mod_add(t1_bn, r_bn, s_bn, n_bn, bn_ctx);

    if (BN_is_zero(t1_bn))
    {
        return -1;
    }

    //t1 = (r+s)^(-1) mod n
    BN_mod_inverse(t1_bn, t1_bn, n_bn, bn_ctx);

    //t2 = (r+k) mod n
    BN_mod_add(t2_bn, r_bn, k_bn, n_bn, bn_ctx);

    //d = (r+s)^(-1) * (r+k) mod n
    BN_mod_mul(d_bn, t1_bn, t2_bn, n_bn, bn_ctx);

    //d = (r+s)^(-1) * (r+k) -1 mod n
    BN_mod_sub(d_bn, d_bn, BN_value_one(), n_bn, bn_ctx);

    BN_bn2bin(d_bn, d);

    BN_CTX_free(bn_ctx);
    BN_free(n_bn);
    BN_free(k_bn);
    BN_free(r_bn);
    BN_free(s_bn);
    BN_free(t1_bn);
    BN_free(t2_bn);
    BN_free(d_bn);

    return 0;
}

void sm2_sign_sca_test()
{
    int bn_len = 32;

    uint8_t n[32] = { 0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x72,0x03,0xDF,0x6B,0x21,0xC6,0x05,0x2B,0x53,0xBB,0xF4,0x09,0x39,0xD5,0x41,0x23 };
	uint8_t k[32] = { 0x59,0x27,0x6E,0x27,0xD5,0x06,0x86,0x1A,0x16,0x68,0x0F,0x3A,0xD9,0xC0,0x2D,0xCC,0xEF,0x3C,0xC1,0xFA,0x3C,0xDB,0xE4,0xCE,0x6D,0x54,0xB8,0x0D,0xEA,0xC1,0xBC,0x21 };
    uint8_t r[32] = { 0xF5,0xA0,0x3B,0x06,0x48,0xD2,0xC4,0x63,0x0E,0xEA,0xC5,0x13,0xE1,0xBB,0x81,0xA1,0x59,0x44,0xDA,0x38,0x27,0xD5,0xB7,0x41,0x43,0xAC,0x7E,0xAC,0xEE,0xE7,0x20,0xB3 };
    uint8_t s[32] = { 0xB1,0xB6,0xAA,0x29,0xDF,0x21,0x2F,0xD8,0x76,0x31,0x82,0xBC,0x0D,0x42,0x1C,0xA1,0xBB,0x90,0x38,0xFD,0x1F,0x7F,0x42,0xD4,0x84,0x0B,0x69,0xC4,0x85,0xBB,0xC1,0xAA };
    uint8_t d[32] = { 0x39,0x45,0x20,0x8F,0x7B,0x21,0x44,0xB1,0x3F,0x36,0xE3,0x8A,0xC6,0xD3,0x9F,0x95,0x88,0x93,0x93,0x69,0x28,0x60,0xB5,0x1A,0x42,0xFB,0x81,0xEF,0x4D,0xF7,0xC5,0xB8 };

    uint8_t calc_d[32];

    int ret = sm2_sign_sca(bn_len, n, k, r, s, calc_d);

    if (ret != 0)
    {
        printf("sm2_sign_sca failed. =>(r+s)=0\n");
    }

    print_u8("compute d", calc_d, bn_len);
}